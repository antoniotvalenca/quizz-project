var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => lib_default
});

// src/lib.ts
var RedisStore = class {
  sendCommand;
  prefix;
  resetExpiryOnChange;
  loadedScriptSha1;
  windowMs;
  constructor(options) {
    this.sendCommand = options.sendCommand;
    this.prefix = options.prefix ?? "rl:";
    this.resetExpiryOnChange = options.resetExpiryOnChange ?? false;
    this.loadedScriptSha1 = this.loadScript();
  }
  async loadScript() {
    const result = await this.sendCommand("SCRIPT", "LOAD", `
        local totalHits = redis.call("INCR", KEYS[1])
        local timeToExpire = redis.call("PTTL", KEYS[1])
        if timeToExpire <= 0 or ARGV[1] == "1"
        then
            redis.call("PEXPIRE", KEYS[1], tonumber(ARGV[2]))
            timeToExpire = tonumber(ARGV[2])
        end

        return { totalHits, timeToExpire }
    `.replace(/^\s+/gm, "").trim());
    if (typeof result !== "string") {
      throw new TypeError("unexpected reply from redis client");
    }
    return result;
  }
  prefixKey(key) {
    return `${this.prefix}${key}`;
  }
  init(options) {
    this.windowMs = options.windowMs;
  }
  async increment(key) {
    const results = await this.sendCommand("EVALSHA", await this.loadedScriptSha1, "1", this.prefixKey(key), this.resetExpiryOnChange ? "1" : "0", this.windowMs.toString());
    if (!Array.isArray(results)) {
      throw new TypeError("Expected result to be array of values");
    }
    if (results.length !== 2) {
      throw new Error(`Expected 2 replies, got ${results.length}`);
    }
    const totalHits = results[0];
    if (typeof totalHits !== "number") {
      throw new TypeError("Expected value to be a number");
    }
    const timeToExpire = results[1];
    if (typeof timeToExpire !== "number") {
      throw new TypeError("Expected value to be a number");
    }
    const resetTime = new Date(Date.now() + timeToExpire);
    return {
      totalHits,
      resetTime
    };
  }
  async decrement(key) {
    await this.sendCommand("DECR", this.prefixKey(key));
  }
  async resetKey(key) {
    await this.sendCommand("DEL", this.prefixKey(key));
  }
};
var lib_default = RedisStore;
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
module.exports = RedisStore; module.exports.default = RedisStore;
