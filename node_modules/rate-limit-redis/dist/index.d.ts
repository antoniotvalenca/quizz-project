// Generated by dts-bundle-generator v6.4.0

import { IncrementResponse, Options as RateLimitConfiguration, Store } from 'express-rate-limit';

/**
 * The type of data Redis might return to us.
 */
export declare type RedisReply = number | string;
/**
 * The library sends Redis raw commands, so all we need to know are the
 * 'raw-command-sending' functions for each redis client.
 */
export declare type SendCommandFn = (...args: string[]) => Promise<RedisReply | RedisReply[]>;
/**
 * The configuration options for the store.
 */
export interface Options {
	/**
	 * The function used to send commands to Redis.
	 */
	readonly sendCommand: SendCommandFn;
	/**
	 * The text to prepend to the key in Redis.
	 */
	readonly prefix?: string;
	/**
	 * Whether to reset the expiry for a particular key whenever its hit count
	 * changes.
	 */
	readonly resetExpiryOnChange?: boolean;
}
declare class RedisStore implements Store {
	/**
	 * The function used to send raw commands to Redis.
	 */
	sendCommand: SendCommandFn;
	/**
	 * The text to prepend to the key in Redis.
	 */
	prefix: string;
	/**
	 * Whether to reset the expiry for a particular key whenever its hit count
	 * changes.
	 */
	resetExpiryOnChange: boolean;
	/**
	 * Stores the loaded SHA1 of the LUA script for executing the increment operations.
	 */
	loadedScriptSha1: Promise<string>;
	/**
	 * The number of milliseconds to remember that user's requests.
	 */
	windowMs: number;
	/**
	 * @constructor for `RedisStore`.
	 *
	 * @param options {Options} - The configuration options for the store.
	 */
	constructor(options: Options);
	loadScript(): Promise<string>;
	/**
	 * Method to prefix the keys with the given text.
	 *
	 * @param key {string} - The key.
	 *
	 * @returns {string} - The text + the key.
	 */
	prefixKey(key: string): string;
	/**
	 * Method that actually initializes the store.
	 *
	 * @param options {RateLimitConfiguration} - The options used to setup the middleware.
	 */
	init(options: RateLimitConfiguration): void;
	/**
	 * Method to increment a client's hit counter.
	 *
	 * @param key {string} - The identifier for a client
	 *
	 * @returns {IncrementResponse} - The number of hits and reset time for that client
	 */
	increment(key: string): Promise<IncrementResponse>;
	/**
	 * Method to decrement a client's hit counter.
	 *
	 * @param key {string} - The identifier for a client
	 */
	decrement(key: string): Promise<void>;
	/**
	 * Method to reset a client's hit counter.
	 *
	 * @param key {string} - The identifier for a client
	 */
	resetKey(key: string): Promise<void>;
}

export {
	RedisStore as default,
};

export {};
